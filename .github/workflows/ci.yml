name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHONPATH: ${{ github.workspace }}/src

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Install dependencies
      run: |
        echo "Installing dependencies with Poetry..."
        poetry lock --no-update || echo "Lock file generation failed, continuing..."
        poetry install --with dev --no-interaction

    - name: Verify PyTorch CPU installation
      run: |
        poetry run python -c "import torch; print(f'PyTorch version: {torch.__version__}'); print(f'CUDA available: {torch.cuda.is_available()}')"

    - name: Run code formatting check (Black)
      run: |
        poetry run black --check --diff .

    - name: Run linting (Ruff)
      run: |
        poetry run ruff check .

    - name: Run type checking (MyPy)
      run: |
        poetry run mypy src/ --ignore-missing-imports

    - name: Run tests with coverage
      run: |
        echo "Running tests with coverage..."
        poetry run pytest tests/ src/analytics_toolkit/pytorch_regression/tests/ --cov=src/analytics_toolkit --cov-report=xml --cov-report=term-missing -v --tb=short

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install dependencies
      run: |
        poetry install --with qa

    - name: Run Bandit security scanner
      run: |
        poetry run bandit -r src/ -f json -o bandit-report.json
        poetry run bandit -r src/ --severity-level medium
      continue-on-error: true

    - name: Run Safety vulnerability check
      run: |
        echo "Exporting dependencies for safety check..."
        poetry export -f requirements.txt --output requirements.txt --without-hashes || echo "Poetry export failed, creating basic requirements..."
        if [ ! -f requirements.txt ]; then
          echo "# Fallback requirements" > requirements.txt
          poetry show --only main | awk '{print $1}' >> requirements.txt || true
        fi
        echo "Running safety check..."
        poetry run safety check --json --output safety-report.json || echo "Safety JSON output failed"
        poetry run safety check || echo "Safety check failed"
      continue-on-error: true

    - name: Run pip-audit vulnerability scanner
      run: |
        poetry run pip-audit -r requirements.txt --format=json --output=pip-audit-report.json
        poetry run pip-audit -r requirements.txt
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports-ci
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json
        retention-days: 7

  dependency-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Check for dependency vulnerabilities
      run: |
        poetry export -f requirements.txt --output requirements.txt --without-hashes
        pip install pip-audit
        pip-audit -r requirements.txt --format=json --output=audit-report.json
      continue-on-error: true

    - name: Upload dependency audit report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-audit
        path: audit-report.json
      if: always()

  build-package:
    runs-on: ubuntu-latest
    needs: [test, security-scan, dependency-check]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Build package
      run: |
        poetry build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: package-builds
        path: dist/

    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import analytics_toolkit; print('Package installed successfully')"

  publish-test-pypi:
    runs-on: ubuntu-latest
    needs: build-package
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: test-pypi

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: package-builds
        path: dist/

    - name: Publish to Test PyPI
      run: |
        poetry config repositories.test-pypi https://test.pypi.org/legacy/
        poetry config pypi-token.test-pypi ${{ secrets.TEST_PYPI_API_TOKEN }}
        poetry publish --repository test-pypi --skip-existing
      continue-on-error: true

  pre-commit-hooks:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install dependencies
      run: poetry install --with dev

    - name: Run pre-commit hooks
      run: |
        echo "Installing pre-commit hooks..."
        poetry run pre-commit install || echo "Pre-commit install failed, continuing..."
        echo "Running pre-commit hooks..."
        poetry run pre-commit run --all-files --show-diff-on-failure || echo "Pre-commit checks failed, continuing..."

  test-docs:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-docs-${{ runner.os }}-3.12-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: |
        poetry install --with dev
        poetry add --group dev sphinx sphinx-rtd-theme myst-parser sphinx-autodoc-typehints

    - name: Install package
      run: |
        poetry install

    - name: Test documentation build
      run: |
        echo "Setting up documentation build..."
        # Create docs directories if they don't exist
        mkdir -p docs/_static docs/_templates docs/api

        # Generate API documentation
        echo "Generating API documentation..."
        poetry run sphinx-apidoc -o docs/api src/analytics_toolkit --force --module-first || echo "sphinx-apidoc failed, continuing..."

        # Build documentation
        echo "Building documentation..."
        cd docs
        poetry run sphinx-build -b html . _build/html || echo "Documentation build failed, continuing..."

    - name: Upload documentation test artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: docs-build-logs
        path: docs/_build/
        retention-days: 7

  notify-status:
    runs-on: ubuntu-latest
    needs: [test]
    if: always()

    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' }}
      run: |
        echo "✅ Tests passed successfully!"
        echo "- Tests: ${{ needs.test.result }}"

    - name: Notify failure
      if: ${{ needs.test.result == 'failure' }}
      run: |
        echo "❌ Tests failed:"
        echo "- Tests: ${{ needs.test.result }}"
        exit 1