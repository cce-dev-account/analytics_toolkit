name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # Force Poetry to use CPU-only PyTorch for faster CI builds
  PIP_EXTRA_INDEX_URL: https://download.pytorch.org/whl/cpu

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Load cached Poetry installation
      id: cached-poetry
      uses: actions/cache@v3
      with:
        path: ~/.local
        key: poetry-${{ runner.os }}-${{ matrix.python-version }}

    - name: Install Poetry
      if: steps.cached-poetry.outputs.cache-hit != 'true'
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-${{ matrix.python-version }}-

    - name: Configure Poetry for CPU-only PyTorch
      run: |
        poetry config repositories.pytorch-cpu https://download.pytorch.org/whl/cpu
        poetry source add --priority=explicit pytorch-cpu https://download.pytorch.org/whl/cpu

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        poetry install --with dev
        # Ensure we have CPU-only PyTorch
        poetry run pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu --force-reinstall

    - name: Verify PyTorch CPU installation
      run: |
        poetry run python -c "import torch; print(f'PyTorch version: {torch.__version__}'); print(f'CUDA available: {torch.cuda.is_available()}')"

    - name: Run code formatting check (Black)
      run: |
        poetry run black --check --diff .

    - name: Run linting (Ruff)
      run: |
        poetry run ruff check .

    - name: Run type checking (MyPy)
      run: |
        poetry run mypy src/ --ignore-missing-imports

    - name: Run tests with coverage
      run: |
        poetry run pytest --cov=src/analytics_toolkit --cov-report=xml --cov-report=html --cov-report=term-missing -v

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage to GitHub
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install dependencies
      run: |
        poetry install --with qa

    - name: Run Bandit security scanner
      run: |
        poetry run bandit -r src/ -f json -o bandit-report.json
        poetry run bandit -r src/ --severity-level medium
      continue-on-error: true

    - name: Run Safety vulnerability check
      run: |
        poetry export -f requirements.txt --output requirements.txt --without-hashes
        poetry run safety check --json --output safety-report.json
        poetry run safety check
      continue-on-error: true

    - name: Run pip-audit vulnerability scanner
      run: |
        poetry run pip-audit -r requirements.txt --format=json --output=pip-audit-report.json
        poetry run pip-audit -r requirements.txt
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports-ci
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json
        retention-days: 7

  dependency-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Check for dependency vulnerabilities
      run: |
        poetry export -f requirements.txt --output requirements.txt --without-hashes
        pip install pip-audit
        pip-audit -r requirements.txt --format=json --output=audit-report.json
      continue-on-error: true

    - name: Upload dependency audit report
      uses: actions/upload-artifact@v3
      with:
        name: dependency-audit
        path: audit-report.json
      if: always()

  build-package:
    runs-on: ubuntu-latest
    needs: [test, security-scan, dependency-check]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Build package
      run: |
        poetry build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: package-builds
        path: dist/

    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import analytics_toolkit; print('Package installed successfully')"

  publish-test-pypi:
    runs-on: ubuntu-latest
    needs: build-package
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: test-pypi

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: package-builds
        path: dist/

    - name: Publish to Test PyPI
      run: |
        poetry config repositories.test-pypi https://test.pypi.org/legacy/
        poetry config pypi-token.test-pypi ${{ secrets.TEST_PYPI_API_TOKEN }}
        poetry publish --repository test-pypi --skip-existing
      continue-on-error: true

  pre-commit-hooks:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install dependencies
      run: poetry install --with dev

    - name: Run pre-commit hooks
      run: |
        poetry run pre-commit run --all-files --show-diff-on-failure

  test-docs:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-docs-${{ runner.os }}-3.12-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: |
        poetry install --with dev
        poetry add --group dev sphinx sphinx-rtd-theme myst-parser sphinx-autodoc-typehints

    - name: Install package
      run: |
        poetry install

    - name: Test documentation build
      run: |
        # Create docs directories if they don't exist
        mkdir -p docs/_static docs/_templates

        # Generate API documentation
        poetry run sphinx-apidoc -o docs/api src/analytics_toolkit --force --module-first

        # Build documentation
        cd docs
        poetry run sphinx-build -b html . _build/html -W

    - name: Upload documentation test artifacts
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: docs-build-logs
        path: docs/_build/
        retention-days: 7

  notify-status:
    runs-on: ubuntu-latest
    needs: [test, security-scan, dependency-check, build-package, test-docs]
    if: always()

    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' && needs.security-scan.result == 'success' && needs.test-docs.result == 'success' }}
      run: |
        echo "✅ All checks passed successfully!"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Security: ${{ needs.security-scan.result }}"
        echo "- Dependencies: ${{ needs.dependency-check.result }}"
        echo "- Build: ${{ needs.build-package.result }}"
        echo "- Documentation: ${{ needs.test-docs.result }}"

    - name: Notify failure
      if: ${{ needs.test.result == 'failure' || needs.security-scan.result == 'failure' || needs.test-docs.result == 'failure' }}
      run: |
        echo "❌ Some checks failed:"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Security: ${{ needs.security-scan.result }}"
        echo "- Dependencies: ${{ needs.dependency-check.result }}"
        echo "- Build: ${{ needs.build-package.result }}"
        echo "- Documentation: ${{ needs.test-docs.result }}"
        exit 1