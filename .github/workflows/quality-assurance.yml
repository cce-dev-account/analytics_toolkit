name: Quality Assurance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly security scans on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.12"

jobs:
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install dependencies
      run: |
        poetry install --with qa

    - name: Run Bandit security scanner
      run: |
        poetry run bandit -r src/ -f json -o bandit-report.json
        poetry run bandit -r src/ -f txt
      continue-on-error: true

    - name: Run Safety vulnerability check
      run: |
        poetry run safety check --json --output safety-report.json
        poetry run safety check
      continue-on-error: true

    - name: Run pip-audit vulnerability scanner
      run: |
        poetry export -f requirements.txt --output requirements.txt --without-hashes
        poetry run pip-audit -r requirements.txt --format=json --output=pip-audit-report.json
        poetry run pip-audit -r requirements.txt
      continue-on-error: true

    - name: Run Semgrep static analysis
      if: github.event_name != 'schedule'  # Skip on scheduled runs to avoid rate limits
      run: |
        poetry run semgrep --config=auto src/ --json --output=semgrep-report.json
        poetry run semgrep --config=auto src/
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json
          semgrep-report.json
        retention-days: 30

    - name: Create security summary
      run: |
        echo "## 🔒 Security Analysis Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Bandit results
        if [ -f "bandit-report.json" ]; then
          BANDIT_ISSUES=$(jq '.metrics."_totals".loc' bandit-report.json 2>/dev/null || echo "0")
          echo "### 🛡️ Bandit Security Scanner" >> $GITHUB_STEP_SUMMARY
          echo "- Lines of code scanned: $BANDIT_ISSUES" >> $GITHUB_STEP_SUMMARY
          BANDIT_RESULTS=$(jq '.results | length' bandit-report.json 2>/dev/null || echo "0")
          echo "- Security issues found: $BANDIT_RESULTS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi

        # Safety results
        if [ -f "safety-report.json" ]; then
          echo "### 🔍 Safety Vulnerability Check" >> $GITHUB_STEP_SUMMARY
          SAFETY_VULNS=$(jq '. | length' safety-report.json 2>/dev/null || echo "0")
          echo "- Vulnerabilities found: $SAFETY_VULNS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi

        # pip-audit results
        if [ -f "pip-audit-report.json" ]; then
          echo "### 🔎 pip-audit Vulnerability Scanner" >> $GITHUB_STEP_SUMMARY
          PIP_AUDIT_VULNS=$(jq '.vulnerabilities | length' pip-audit-report.json 2>/dev/null || echo "0")
          echo "- Vulnerabilities found: $PIP_AUDIT_VULNS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi

  dependency-analysis:
    name: Dependency Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Check dependency vulnerabilities
      run: |
        poetry install --with qa
        poetry export -f requirements.txt --output requirements.txt --without-hashes
        poetry run safety check --json --output safety-deps.json || true
        poetry run pip-audit -r requirements.txt --format=json --output=audit-deps.json || true

    - name: Check for outdated dependencies
      run: |
        poetry show --outdated > outdated-deps.txt || true
        echo "## 📦 Dependency Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Outdated Dependencies" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat outdated-deps.txt >> $GITHUB_STEP_SUMMARY || echo "All dependencies are up to date!" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Generate dependency tree
      run: |
        poetry show --tree > dependency-tree.txt
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Dependency Tree (Top Level)" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        poetry show | head -20 >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Upload dependency reports
      uses: actions/upload-artifact@v3
      with:
        name: dependency-reports
        path: |
          safety-deps.json
          audit-deps.json
          outdated-deps.txt
          dependency-tree.txt
        retention-days: 30

  code-quality-analysis:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install dependencies
      run: |
        poetry install --with qa

    - name: Run Radon complexity analysis
      run: |
        echo "## 📊 Code Quality Analysis" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Cyclomatic complexity
        echo "### 🔄 Cyclomatic Complexity" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        poetry run radon cc src/ --average --show-complexity >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

        # Maintainability index
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Maintainability Index" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        poetry run radon mi src/ --show >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

        # Raw metrics
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📈 Raw Metrics" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        poetry run radon raw src/ --summary >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Generate detailed complexity report
      run: |
        # Generate JSON reports for programmatic analysis
        poetry run radon cc src/ --json > complexity-report.json
        poetry run radon mi src/ --json > maintainability-report.json
        poetry run radon raw src/ --json > raw-metrics-report.json
        poetry run radon hal src/ --json > halstead-report.json

    - name: Check complexity thresholds
      run: |
        poetry run python -c "
        import json
        import sys

        # Load complexity report
        try:
            with open('complexity-report.json', 'r') as f:
                complexity = json.load(f)
        except FileNotFoundError:
            print('No complexity report found')
            sys.exit(0)

        # Check for high complexity functions
        high_complexity = []
        for file_path, functions in complexity.items():
            for func in functions:
                if func['complexity'] > 10:  # Threshold for high complexity
                    high_complexity.append({
                        'file': file_path,
                        'function': func['name'],
                        'complexity': func['complexity'],
                        'line': func['lineno']
                    })

        if high_complexity:
            print(f'Found {len(high_complexity)} functions with high complexity:')
            for item in high_complexity[:10]:  # Show top 10
                print(f\"  {item['file']}:{item['line']} {item['function']} (complexity: {item['complexity']})\")

            # Create GitHub annotation
            with open('complexity-issues.txt', 'w') as f:
                f.write(f'High complexity functions found: {len(high_complexity)}\\n')
                for item in high_complexity:
                    f.write(f\"{item['file']}:{item['line']} {item['function']} (complexity: {item['complexity']})\\n\")
        else:
            print('✅ All functions have acceptable complexity')
        "

    - name: Upload quality reports
      uses: actions/upload-artifact@v3
      with:
        name: quality-reports
        path: |
          complexity-report.json
          maintainability-report.json
          raw-metrics-report.json
          halstead-report.json
          complexity-issues.txt
        retention-days: 30

  license-compliance:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install dependencies
      run: |
        poetry install
        pip install pip-licenses

    - name: Check license compatibility
      run: |
        echo "## 📄 License Compliance Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Generate license report
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=markdown --output-file=licenses.md

        echo "### Dependency Licenses" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        pip-licenses --format=plain --summary >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

        # Check for problematic licenses
        PROBLEMATIC_LICENSES="GPL-3.0,AGPL-3.0,LGPL-3.0"
        if pip-licenses --format=json | jq -r '.[].License' | grep -E "$PROBLEMATIC_LICENSES"; then
          echo "⚠️ Found potentially problematic licenses" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ No problematic licenses found" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload license reports
      uses: actions/upload-artifact@v3
      with:
        name: license-reports
        path: |
          licenses.json
          licenses.md
        retention-days: 30

  qa-summary:
    name: QA Summary
    runs-on: ubuntu-latest
    needs: [security-analysis, dependency-analysis, code-quality-analysis, license-compliance]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate comprehensive QA report
      run: |
        echo "# 🔍 Quality Assurance Report" > qa-report.md
        echo "" >> qa-report.md
        echo "Generated on: $(date)" >> qa-report.md
        echo "" >> qa-report.md

        # Security summary
        echo "## 🔒 Security Analysis" >> qa-report.md
        if [ -f "security-reports/bandit-report.json" ]; then
          BANDIT_ISSUES=$(jq '.results | length' security-reports/bandit-report.json 2>/dev/null || echo "0")
          echo "- Bandit security issues: $BANDIT_ISSUES" >> qa-report.md
        fi

        if [ -f "security-reports/safety-report.json" ]; then
          SAFETY_ISSUES=$(jq '. | length' security-reports/safety-report.json 2>/dev/null || echo "0")
          echo "- Safety vulnerabilities: $SAFETY_ISSUES" >> qa-report.md
        fi

        echo "" >> qa-report.md

        # Code quality summary
        echo "## 📊 Code Quality" >> qa-report.md
        if [ -f "quality-reports/complexity-issues.txt" ]; then
          echo "- High complexity functions found (see artifacts)" >> qa-report.md
        else
          echo "- ✅ No high complexity issues found" >> qa-report.md
        fi

        echo "" >> qa-report.md

        # Overall status
        echo "## 📋 Overall Status" >> qa-report.md
        echo "- Security Analysis: ${{ needs.security-analysis.result }}" >> qa-report.md
        echo "- Dependency Analysis: ${{ needs.dependency-analysis.result }}" >> qa-report.md
        echo "- Code Quality Analysis: ${{ needs.code-quality-analysis.result }}" >> qa-report.md
        echo "- License Compliance: ${{ needs.license-compliance.result }}" >> qa-report.md

    - name: Upload QA summary report
      uses: actions/upload-artifact@v3
      with:
        name: qa-summary-report
        path: qa-report.md
        retention-days: 90

    - name: Comment PR with QA results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let comment = `## 🔍 Quality Assurance Results\n\n`;

          comment += `| Check | Status |\n`;
          comment += `|-------|--------|\n`;
          comment += `| Security Analysis | ${{ needs.security-analysis.result == 'success' ? '✅' : '❌' }} |\n`;
          comment += `| Dependency Analysis | ${{ needs.dependency-analysis.result == 'success' ? '✅' : '❌' }} |\n`;
          comment += `| Code Quality | ${{ needs.code-quality-analysis.result == 'success' ? '✅' : '❌' }} |\n`;
          comment += `| License Compliance | ${{ needs.license-compliance.result == 'success' ? '✅' : '❌' }} |\n\n`;

          comment += `📄 Detailed reports are available in the workflow artifacts.\n\n`;
          comment += `*This comment is automatically updated on each push.*`;

          const { owner, repo } = context.repo;
          const pr_number = context.payload.pull_request.number;

          // Check if we already have a comment
          const comments = await github.rest.issues.listComments({
            owner,
            repo,
            issue_number: pr_number,
          });

          const existingComment = comments.data.find(
            comment => comment.body.includes('🔍 Quality Assurance Results')
          );

          if (existingComment) {
            await github.rest.issues.updateComment({
              owner,
              repo,
              comment_id: existingComment.id,
              body: comment,
            });
          } else {
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pr_number,
              body: comment,
            });
          }